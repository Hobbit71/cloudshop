version: "3.9"

# Local development infrastructure for CloudShop
services:
  postgres:
    image: postgres:16-alpine
    container_name: cloudshop-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-cloudshop}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cloudshop}
      POSTGRES_DB: ${POSTGRES_DB:-cloudshop}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cloudshop

  redis:
    image: redis:7-alpine
    container_name: cloudshop-redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cloudshop

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.2
    container_name: cloudshop-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "${ELASTIC_PORT:-9200}:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200 >/dev/null"]
      interval: 15s
      timeout: 10s
      retries: 10
    networks:
      - cloudshop

  payment-mock:
    image: wiremock/wiremock:3.9.1
    container_name: cloudshop-payment-mock
    restart: unless-stopped
    command: ["--verbose", "--port", "8080"]
    ports:
      - "${PAYMENT_MOCK_PORT:-8080}:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:8080/__admin/health | grep -q '""status"":' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cloudshop

  auth:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    container_name: cloudshop-auth
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      HOST: 0.0.0.0
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-cloudshop}
      DB_USER: ${POSTGRES_USER:-cloudshop}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-cloudshop}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-change-me-in-production}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173,http://localhost:3000}
    ports:
      - "${AUTH_PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3001/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})\""]
      interval: 30s
      timeout: 3s
      start_period: 40s
      retries: 3
    networks:
      - cloudshop

  product-service:
    build:
      context: ./services/product-service
      dockerfile: Dockerfile
    container_name: cloudshop-product-service
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-dev}
      PORT: 3002
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-cloudshop}
      DB_USER: ${POSTGRES_USER:-cloudshop}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-cloudshop}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      ELASTICSEARCH_HOST: elasticsearch
      ELASTICSEARCH_PORT: 9200
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173,http://localhost:3000}
    ports:
      - "${PRODUCT_SERVICE_PORT:-3002}:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3002/health || exit 1"]
      interval: 30s
      timeout: 3s
      start_period: 60s
      retries: 3
    networks:
      - cloudshop

  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    container_name: cloudshop-order-service
    restart: unless-stopped
    environment:
      DEBUG: ${DEBUG:-false}
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-cloudshop}:${POSTGRES_PASSWORD:-cloudshop}@postgres:5432/${POSTGRES_DB:-cloudshop}_orders
      DATABASE_POOL_SIZE: ${DATABASE_POOL_SIZE:-10}
      DATABASE_MAX_OVERFLOW: ${DATABASE_MAX_OVERFLOW:-20}
      API_PREFIX: /api/v1
      CORS_ORIGINS: ${CORS_ORIGIN:-http://localhost:5173,http://localhost:3000}
      AUTH_SERVICE_URL: http://auth:3001
      JWT_SECRET: ${JWT_SECRET:-change-me-in-production}
      PRODUCT_SERVICE_URL: http://product-service:3002
      PAYMENT_SERVICE_URL: http://payment-mock:8080
      SHIPPING_BASE_RATE: ${SHIPPING_BASE_RATE:-5.99}
      SHIPPING_FREE_THRESHOLD: ${SHIPPING_FREE_THRESHOLD:-50.00}
      TAX_RATE: ${TAX_RATE:-0.08}
      ENABLE_NOTIFICATIONS: ${ENABLE_NOTIFICATIONS:-true}
      ENABLE_SHIPPING_CALCULATION: ${ENABLE_SHIPPING_CALCULATION:-true}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    ports:
      - "${ORDER_SERVICE_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8000/health')\""]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    networks:
      - cloudshop

  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    container_name: cloudshop-payment-service
    restart: unless-stopped
    environment:
      ENV: ${ENV:-development}
      PORT: 8081
      DATABASE_URL: postgres://${POSTGRES_USER:-cloudshop}:${POSTGRES_PASSWORD:-cloudshop}@postgres:5432/${POSTGRES_DB:-cloudshop}_payments?sslmode=disable
      JWT_SECRET: ${JWT_SECRET:-change-me-in-production}
      AUTH_SERVICE_URL: http://auth:3001
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:-}
      PAYPAL_CLIENT_ID: ${PAYPAL_CLIENT_ID:-}
      PAYPAL_CLIENT_SECRET: ${PAYPAL_CLIENT_SECRET:-}
      PAYPAL_MODE: ${PAYPAL_MODE:-sandbox}
      CORS_ORIGINS: ${CORS_ORIGIN:-http://localhost:5173,http://localhost:3000}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${PAYMENT_SERVICE_PORT:-8081}:8081"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8081/health || exit 1"]
      interval: 30s
      timeout: 3s
      start_period: 30s
      retries: 3
    networks:
      - cloudshop

  inventory-service:
    build:
      context: ./services/inventory-service
      dockerfile: Dockerfile
    container_name: cloudshop-inventory-service
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3003
      HOST: 0.0.0.0
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-cloudshop}
      DB_USER: ${POSTGRES_USER:-cloudshop}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-cloudshop}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 1
      SOCKET_IO_CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173,http://localhost:3000}
      RESERVATION_TTL: ${RESERVATION_TTL:-1800}
      LOW_STOCK_THRESHOLD: ${LOW_STOCK_THRESHOLD:-10}
      FORECASTING_LOOKBACK_DAYS: ${FORECASTING_LOOKBACK_DAYS:-90}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173,http://localhost:3000}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${INVENTORY_SERVICE_PORT:-3003}:3003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3003/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})\""]
      interval: 30s
      timeout: 3s
      start_period: 40s
      retries: 3
    networks:
      - cloudshop

networks:
  cloudshop:
    name: cloudshop

volumes:
  pgdata:
  esdata:

