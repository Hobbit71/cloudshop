version: "3.9"

services:
  postgres:
    image: postgres:16
    container_name: cloudshop-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-cloudshop}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-cloudshop}
      POSTGRES_DB: ${POSTGRES_DB:-cloudshop}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: cloudshop-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.1
    container_name: cloudshop-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
      - "9300:9300"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - esdata:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=60s"]
      interval: 20s
      timeout: 10s
      retries: 10

  mock-payment:
    image: wiremock/wiremock:2.35.0
    container_name: cloudshop-mock-payment
    restart: unless-stopped
    command: ["--verbose"]
    ports:
      - "${PAYMENT_GATEWAY_PORT:-8080}:8080"
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/__admin"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Future: add microservices here or via profiles
  # api-gateway:
  #   build: ./services/api-gateway
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     elasticsearch:
  #       condition: service_healthy
  #   env_file: .env

volumes:
  pgdata:
  esdata:


